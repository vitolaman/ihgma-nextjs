/* eslint-disable @next/next/no-img-element */
import React, { useEffect, useCallback, useState } from "react";
import { unescape } from "lodash";
import Head from "next/head";
import { useDispatch, useSelector } from "react-redux";
import { Header, Footer } from "../../components";
import { useRouter } from "next/router";

import { ACTION_TYPES } from "../../redux/actions/articleAction";

export default function Article() {
  const dispatch = useDispatch();
  const router = useRouter();
  const { id } = router.query;
  // Using the useSelector Hook to fetch the state from store.
  const fetchedCountries = useSelector((state) => state);

  const fetchedArticles = useSelector((state) => state?.articles?.article);
  const fetchedSidebarArticles = useSelector(
    (state) => state?.articles?.articleSidebarList
  );

  const [articleData, setArticleData] = useState([]);
  const [articleSidebarData, setArticleSidebarData] = useState([]);

  useEffect(() => {
    if (id) {
      dispatch({
        type: ACTION_TYPES.FETCH_ARTICLE,
        id,
      });
      dispatch({
        type: ACTION_TYPES.FETCH_ARTICLE_SIDEBAR,
      });
    }
  }, [id]);

  useEffect(() => {
    if (fetchedArticles?.artikel) {
      setArticleData(fetchedArticles?.artikel);
    }
    if (fetchedSidebarArticles?.artikel) {
      setArticleSidebarData(fetchedSidebarArticles?.artikel);
    }
  }, [fetchedArticles, fetchedSidebarArticles?.artikel]);

  useEffect(() => {
    console.log(fetchedSidebarArticles);
  }, [fetchedSidebarArticles]);

  const renderTitle = useCallback(() => {
    if (articleData.length === 0) {
      return "";
    }

    return (
      <h1 className="mb-2 text-3xl font-extrabold text-black">
        {articleData[0]?.title}
      </h1>
    );
  }, [articleData]);

  const renderMainImage = useCallback(() => {
    if (articleData.length === 0) {
      return "";
    }
    const imageUrl = articleData[0]?.main_picture;

    console.log(imageUrl);
    return (
      <div
        className="w-full rounded-xl h-[32rem] bg-cover bg-bottom mb-4"
        style={{ backgroundImage: `url(${imageUrl})` }}
      ></div>
    );
  }, [articleData]);

  const renderSidebarCard = useCallback(
    (item) => {
      if (articleSidebarData.length === 0) {
        return null;
      }
      const imageUrl = item?.main_picture;
      return (
        <div
          onClick={() => router.push(`/article/${item.id}`)}
          className="relative overflow-hidden rounded-xl sm:rounded-2xl border my-4"
        >
          <a>
            <div
              className="h-[109px] md:h-[144px] overflow-hidden bg-cover"
              style={{ backgroundImage: `url(${imageUrl})` }}
            ></div>
            <div className="absolute top-0 left-0 p-2">
              <div className="rounded-2xl bg-blue-100 text-blue-800 p-1 sm:p-2 text-[9px] sm:text-xs">
                <p>{item?.category}</p>
              </div>
            </div>
            <div className="p-2 md:p-3 bg-white">
              <div className="relative">
                <div className="text-start">
                  <h1 className="font-bold text-[10px] md:text-sm mb-1 multiline-ellipsis">
                    {item?.title}
                  </h1>
                </div>
              </div>
            </div>
          </a>
        </div>
      );
    },
    [articleSidebarData.length, router]
  );

  const renderArticle = useCallback(() => {
    if (articleData.length === 0) {
      return "";
    }
    const content = articleData[0]?.content;
    const unescapedHtml = unescape(content);
    const sanitizedHtml = unescapedHtml
      .replace(/\\r\\n/g, "\n")
      .replace(/\r?\n|\r/g, "")
      .replace(/&amp;/g, "&")
      .replace(/&lt;/g, "<")
      .replace(/&gt;/g, ">")
      .replace(/&quot;/g, '"')
      .replace(/&apos;/g, "'");
    return <div dangerouslySetInnerHTML={{ __html: sanitizedHtml }} />;
  }, [articleData]);

  return (
    <div>
      <Head>
        <title>IHGMA</title>
        <meta name="description" content="Generated by IHGMA" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        <section className="bg-white pb-8 lg:px-36">
          <div className="container mx-auto flex flex-col items-start flex-wrap pt-4 justify-center px-8 md:px-0">
            {renderTitle()}
            <div className="bg-white py-4 flex items-center flex-wrap">
              <ul className="flex items-center">
                <li className="inline-flex items-center">
                  <a
                    onClick={() => router.push("/home/")}
                    className="text-gray-600 hover:text-blue-500"
                  >
                    <svg
                      className="w-5 h-auto fill-current mx-2 text-gray-400"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="#000000"
                    >
                      <path d="M0 0h24v24H0V0z" fill="none" />
                      <path d="M10 19v-5h4v5c0 .55.45 1 1 1h3c.55 0 1-.45 1-1v-7h1.7c.46 0 .68-.57.33-.87L12.67 3.6c-.38-.34-.96-.34-1.34 0l-8.36 7.53c-.34.3-.13.87.33.87H5v7c0 .55.45 1 1 1h3c.55 0 1-.45 1-1z" />
                    </svg>
                  </a>

                  <span className="mx-4 h-auto text-gray-400 font-medium">
                    /
                  </span>
                </li>

                <li className="inline-flex items-center">
                  <a
                    onClick={() =>
                      router.push("/category/" + articleData[0]?.category)
                    }
                    className="text-gray-600 hover:text-blue-500"
                  >
                    {articleData[0]?.category || ""}
                  </a>

                  <span className="mx-4 h-auto text-gray-400 font-medium">
                    /
                  </span>
                </li>

                <li className="inline-flex items-center">
                  <a href="#" className="text-gray-600 hover:text-blue-500">
                    {articleData[0]?.title || ""}
                  </a>
                </li>
              </ul>
            </div>
            <div className="flex flex-col md:flex-row w-full">
              <div className="md:basis-3/4 mr-10">
                {renderMainImage()}
                {renderArticle()}
              </div>
              <div className="w-full md:basis-1/4">
                <h1 className="text-2xl font-semibold text-black mb-4">
                  Recent Post
                </h1>
                {articleSidebarData &&
                  articleSidebarData.map((items) => {
                    return renderSidebarCard(items);
                  })}
              </div>
            </div>
          </div>
        </section>
        <Footer />
      </main>
    </div>
  );
}
